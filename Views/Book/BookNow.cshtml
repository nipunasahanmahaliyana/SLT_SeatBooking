@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model IEnumerable<SLT_SeatBooking.Models.Bookings>
@{
	string traineeid = "3";
	// Define the number of groups and buttons per row
	int group10Rows = 10;
	int group10ButtonsPerRow = 4;

	int group9Rows = 10;
	int group9ButtonsPerRow = 4;


	int count = 1;



	var seatid = "";
	int id = 0;
}

<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>User Book Now</title>
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="~/css/user_book_now.css" />
	<link rel="stylesheet" href="~/css/confirmation.css" />
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>

<body style="overflow: hidden; width: 100%; height: 100vh; background-image: url('../assets/images/Home.png'); background-size: cover; background-position: center; background-repeat: no-repeat;">

	<div class="user-payment-completed" style="margin-left:69vh;">
		<div class="rectangle-6">
			<img class="checkmark-icon" src="~/assets/vectors/vector_56_x2.svg" alt="Checkmark" />
			<div class="your-booking-has-been-confirmed">Your booking has been confirmed.</div>
			<div class="booking-id">Booking ID : <span id="booking-idReq"></span>
				<div>Booking Trainee ID : <span id="booking-Trid"></span></div>
				<div>Booking Date : <span id="booking-Date"></span></div>
				<div>Booking Seat Number : <span id="booking-SNum"></span></div>
			</div>
			<div id="qrCodeContainer"></div>
			<div class="button-container">
				<a onclick="downloadPdf()" class="button">Download Ticket</a>
				<a onClick="" class="button">Email Ticket</a>
			</div>
			<a href="#" class="back-button" onclick="location.href='@Url.Action("MyBookings", "Book")'">Back to Dashboard</a>
		</div>
	</div>

	<div class="user-my-bookings">
		<div class="container-14">
			<div class="logo-bg-void-1" style="background-image: url('../logo.png'); margin: 0 4vh 7vh 4vh; width: 140px; height: 140px;">
			</div>
			<a href="">
				<div class="group-29">
					<div class="home-svgrepo-com">
						<img class="vector-9" src="~/assets/vectors/vector_10_x1.svg" />
					</div>
					<div class="home">
						Home
					</div>
				</div>
			</a>
			<a href="/ConfirmBooking">
				<div class="group-30">
					<div class="armchair-seat-svgrepo-com">
						<img class="vector-8" src="~/assets/vectors/vector_43_x1.svg" />
					</div>
					<div class="book-now">
						Book Now
					</div>
				</div>
			</a>
			<a href="">
				<div class="group-31">
					<div class="list-svgrepo-com">
						<img class="vector-3" src="~/assets/vectors/vector_15_x1.svg" />
					</div>
					<span class="my-bookings">
						My Bookings
					</span>
				</div>
			</a>
			<a href="www.google.com">
				<div class="group-32">
					<div class="mailed-svgrepo-com">
						<img class="vector-9" src="~/assets/vectors/mailed_svgrepo_com_13_x1.svg" />
					</div>
					<div class="inquiries">
						Inquiries
					</div>
				</div>
			</a>
			<a href="">
				<div class="group-33">
					<div class="logout-svgrepo-com">
						<img class="vector-3" src="~/assets/vectors/logout_svgrepo_com_11_x1.svg" />
					</div>

					<div class="log-out">
						Log Out
					</div>
				</div>
		</div></a>
		<div class="container-63">
			<div class="container-18">
				<div class="user-circle-svgrepo-com">
					<img class="vector-2" src="~/assets/vectors/vector_64_x1.svg" />
				</div>
				<div class="user">
					User
				</div>
			</div>
			<div class="container-13">
				<div class="my-bookings-1">
					Book Now
				</div>
				<div class="line-1">
				</div>
			
				<div class="container-50">
					<div class="container-30">
						<div class="search-by-date">
							Select Date
						</div>
						<div class="date-and-time-compact-expanded">
							<div class="calendar-container">
								<div class="calendar-header">
									<button class="prev-month">&lt;</button>
									<span class="month-year"></span>
									<button class="next-month">&gt;</button>
								</div>
								<div class="calendar-body">
									<div class="day-names">
										<span>Sun</span><span>Mon</span><span>Tue</span><span>Wed</span>
										<span>Thu</span><span>Fri</span><span>Sat</span>
									</div>
									<div class="days"></div>
								</div>
								<input type="text" id="selected-date" placeholder="Select Date" readonly>
							</div>
						</div>

						<div class="group-14">
							<button id="proceed" class="confirm">
								Confirm
							</button>
						</div>
					</div>
					<!-- Group 10 -->
					<div class="group-10">
						@for (int row = 0; row < group10Rows; row++)
						{
							<div class="container-row">
								@for (int col = 0; col < group10ButtonsPerRow; col++)
								{
									var index = (row * group10ButtonsPerRow) + col; // Calculate the index for button class array
									var buttonId = $"seat{count}"; // Generate a unique ID for each button
									var buttonClass = "my-button";
									string seatNumber = seatid;
									
									<div class="container">
										<button id="@buttonId" class="@buttonClass">@($"Seat {count}")</button>
									</div>
									count++;
								}
							</div>
						}
					</div>

					<!-- Group 9 -->
					<div class="group-9">
						@for (int row = 0; row < group9Rows; row++)
						{
							<div class="container-row">
								@for (int col = 0; col < group9ButtonsPerRow; col++)
								{
									var index = (row * group9ButtonsPerRow) + col; // Calculate the index for button class array
									var buttonId = $"seat{count}"; // Generate a unique ID for each button
									var buttonClass = "my-button";
									<div class="container">
										<button id="@buttonId" class="@buttonClass">@($"Seat {count}")</button>
									</div>
									count++;
								}
							</div>
						}
					</div>

		<script>
			var recieveData;
			/* Include the JavaScript code from above */
						document.addEventListener('DOMContentLoaded', function () {

							const selectedDateElement = document.getElementById('selected-date');
							const calendar = document.querySelector('.calendar-container');
							const monthYearElement = calendar.querySelector('.month-year');
							const daysContainer = calendar.querySelector('.days');
							const prevMonthButton = calendar.querySelector('.prev-month');
							const nextMonthButton = calendar.querySelector('.next-month');

							let currentDate = new Date();

							// Render the calendar for the given date
							function renderCalendar(date) {
								const year = date.getFullYear();
								const month = date.getMonth();
								const firstDay = new Date(year, month, 1).getDay();
								const lastDate = new Date(year, month + 1, 0).getDate();

								// Set the month and year title
								monthYearElement.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });

								// Clear previous days
								daysContainer.innerHTML = '';

								// Add empty spans for days of the previous month
								for (let i = 0; i < firstDay; i++) {
									daysContainer.innerHTML += `<span></span>`;
								}

								// Add days of the current month
								for (let i = 1; i <= lastDate; i++) {
									const dayElement = document.createElement('span');
									dayElement.textContent = i;
									dayElement.addEventListener('click', () => selectDate(new Date(year, month, i)));
									daysContainer.appendChild(dayElement);


								}
							}

							// Handle date selection
							function selectDate(date) {
								// Format the date to YYYY-MM-DD without UTC shift
								const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;

								// Set the input field value to the formatted date
								selectedDateElement.value = formattedDate;

								// Remove the 'selected' class from all days
								document.querySelectorAll('.days span').forEach(day => day.classList.remove('selected'));

								// Calculate the correct index for the nth-child selector
								const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
								const index = date.getDate() + firstDayOfMonth;

								// Highlight the selected day
								const selectedDayElement = document.querySelector(`.days span:nth-child(${index})`);
								if (selectedDayElement) {
									selectedDayElement.classList.add('selected');
								}

								// Handle button clicks for seat selection
								const buttons = document.querySelectorAll('.container .my-button');
								let seatNumber;
								let clickedButton = null;

								buttons.forEach(button => {
									button.addEventListener('click', function () {
										
									});
								});

								buttons.forEach(button => {
									button.addEventListener('mouseenter', function () {
										if (this !== clickedButton) {
											this.style.backgroundColor = '#00B5EC'; // Hover background color
											this.style.color = 'white'; // Hover text color
											this.style.fontWeight = "bold";
										}
									});

									button.addEventListener('mouseleave', function () {
										// Check if the button is the one that was clicked
										if (this !== clickedButton) {
											this.style.backgroundColor = '#D9D9D9'; // Reset to default
											this.style.color = 'white'; // Reset text color
											this.style.fontWeight = "bold";
										}
									});

									button.addEventListener('click', function () {
										var buttonId = this.id;
										console.log('Clicked Button ID:', buttonId);
										seatNumber = buttonId.split('').filter(char => !isNaN(char)).join('');

										// Toggle the 'clicked' class
										const isClicked = this.classList.contains('clicked');
										this.classList.toggle('clicked');

										// Update the clickedButton reference
										clickedButton = this;

										// Apply styles based on click
										if (!isClicked) {
											this.style.backgroundColor = '#4DB848'; // Clicked background color
											this.style.color = 'white'; // Clicked text color
										}

										// Optionally, reset other buttons
										buttons.forEach(btn => {
											if (btn !== this) {
												btn.classList.remove('clicked');
												btn.style.backgroundColor = '#D9D9D9'; // Ensure other buttons reset to default
												btn.style.color = 'white';
											}
										});
									});
								});
								
								// Proceed button click handler
								$('#proceed').click(function () {
									var postData = {
										traineeID: "6",
										traineeName: "Test6",
										bookDateTime: formattedDate,
										traineeNIC: "5",
										seatNumber: seatNumber
									};

									$.ajax({
										url: '/Book/AddRequest',
										type: 'POST',
										contentType: 'application/json',
										data: JSON.stringify(postData),
										success: function (response) {
											console.log('Data inserted successfully:', response);
								

											//$('.booking-id').text(response.bookId);
											
												$('.user-payment-completed').css({ 'display': 'block' });
												$('#booking-idReq').text(response.bookId);
												$('#booking-Trid').text(response.traineeID);
												$('#booking-Date').text(response.bookDateTime);
												$('#booking-SNum').text(response.seatNumber);

												recieveData = {
													bookId: response.bookId,
													traineeID: response.traineeID,
													bookDateTime: response.bookDateTime,
													seatNumber: response.seatNumber
												};

									$.ajax({
										url: '/Book/QRGen', // Adjust this URL to point to the correct endpoint for fetching the QR code image
										type: 'POST', // Use POST if you are sending data; adjust to GET if the endpoint is for fetching without data
										contentType: 'application/json', // Specifies the content type of the request
										data: JSON.stringify(recieveData), // Replace with the data you need to send; if no data is needed, remove this line
										xhrFields: {
											responseType: 'blob' // Set response type to 'blob' to handle binary data (image)
										},
										success: function (blob) {
											// Create a URL from the blob object
											const url = URL.createObjectURL(blob);

											// Create an <img> element and set the source to the blob URL
											const img = document.createElement('img');
											img.src = url;
											img.alt = "QR Code"; // Add an alternative text for accessibility
        
											// Append the <img> element to a specific container in your HTML
											document.getElementById('qrCodeContainer').appendChild(img);

											// Optional: Release the blob URL when it is no longer needed
											img.onload = function() {
												URL.revokeObjectURL(url); // Free memory once the image has been loaded
											};
										
										},
										error: function (xhr, status, error) {
											console.error('Error:', error);
											alert(error);

										}
									
									});
								},
								error: function (xhr, status, error) {
									console.error('Error:', error);
									alert(error);
								}
								});
						});
								// Fetch seat numbers
								$.ajax({
									url: '/Book/GetSeatNumbers',
									type: 'GET',
									data: { date: formattedDate },
									success: function (data) {
										if (data.length > 0) {
											console.log("Data Fetched");
											console.log(data);

											for (let n = 1; n < 81; n++) {
												$(`#seat${n}`).css({
													'background-color': '#D9D9D9',
													'color': 'white',
													'cursor': 'pointer',
													'pointer-events': 'auto'
												});
											}

											data.forEach(function (booking) {
												let data = booking.seatNumber;
												var id = booking.bookId;

												console.log(booking);

												$(`#seat${data}`).css({
													'background-color': '#00B5EC',
													'color': 'white',
													'cursor': 'not-allowed',
													'pointer-events': 'none'
												});

												$('#bookingid').text(id);

												$('.my-button').addClass('hover-effect');

												$('.my-button').on('click', function () {
													$(this).toggleClass('clicked');
												});
											});
										} else {
											$('#bookingid').text('-');

											for (let n = 1; n < 81; n++) {
												$(`#seat${n}`).css({
													'background-color': '#D9D9D9',
													'color': 'white'
												});
											}
										}
									},
									error: function (xhr, status, error) {
										console.error('Error fetching data:', error);
										alert('Error fetching data. Please try again.');
									}
								});


							}

							// Navigate to the previous month
							prevMonthButton.addEventListener('click', () => {
								currentDate.setMonth(currentDate.getMonth() - 1);
								renderCalendar(currentDate);
							});

							// Navigate to the next month
							nextMonthButton.addEventListener('click', () => {
								currentDate.setMonth(currentDate.getMonth() + 1);
								renderCalendar(currentDate);
							});

							// Initialize the calendar with the current date
							renderCalendar(currentDate);
						});
								function downloadPdf() {

								$.ajax({
									url: 'book/PDFGen', // URL of the API endpoint
									type: 'POST',
									contentType: 'application/json',
									data: JSON.stringify(recieveData),
									xhrFields: {
										responseType: 'blob' // Handle response as a binary blob
									},
									success: function (blob) {
										// Create a URL for the blob
										const url = URL.createObjectURL(blob);

										// Create a link element to download the PDF
										const link = document.createElement('a');
										link.href = url;
										link.download = 'Booking Details.pdf'; // File name for the downloaded PDF

										// Append the link to the body and trigger a click
										document.body.appendChild(link);
										link.click();

										// Clean up by removing the link and revoking the URL
										document.body.removeChild(link);
										URL.revokeObjectURL(url);
										alert("Success");
									},
									error: function (xhr, status, error) {
										console.error('Error generating PDF:', error);
										alert(error);
									}
								});
							}
	
		</script>

</body>
</html>