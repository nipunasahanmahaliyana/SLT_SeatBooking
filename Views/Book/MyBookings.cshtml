@model IEnumerable<SLT_SeatBooking.Models.Bookings>
@{
	string traineeid = "3";
	// Define the number of groups and buttons per row
	int group10Rows = 10;
	int group10ButtonsPerRow = 4;

	int group9Rows = 10;
	int group9ButtonsPerRow = 4;


	int count = 1;

	// Define button styles based on some criteria
	string GetButtonStyle(string buttonName)
	{
		if (buttonName == "") return "buttonStyle";
		return "default-button-style"; // Fallback style
	}

	var seatid = "";
	int id = 0;
}
<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>User My Bookings</title>
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="~/css/user_my_bookings.css" />
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body style="overflow: hidden; width: 100%; height: 100vh; background-image: url('../assets/images/Home.png'); background-size: cover; background-position: center; background-repeat: no-repeat;">
</div>
	<div class="user-my-bookings">
		<div class="container-14">
			<div class="logo-bg-void-1" style="background-image: url('../assets/images/logo_bg_void_1.png'); margin: 0 4vh 7vh 4vh; width: 140px; height: 140px;">
			</div>
			<a href="">
				<div class="group-29">
					<div class="home-svgrepo-com">
						<img class="vector-9" src="~/assets/vectors/vector_10_x1.svg" />
					</div>
					<div class="home">
						Home
					</div>
				</div>
			</a>
			<a href="/BookNow">
				<div class="group-30">
					<div class="armchair-seat-svgrepo-com">
						<img class="vector-8" src="~/assets/vectors/vector_x1.svg" />
					</div>
					<div class="book-now">
						Book Now
					</div>
				</div>
			</a>
			<a  onclick="location.href='@Url.Action("MyBookings", "Book")'">
				<div class="group-31">
					<div class="list-svgrepo-com">
						<img class="vector-3" src="~/assets/vectors/vector_13_x1.svg" />
					</div>
					<span class="my-bookings">
						My Bookings
					</span>
				</div>
			</a>
			<a href="www.google.com">
				<div class="group-32">
					<div class="mailed-svgrepo-com">
						<img class="vector-9" src="~/assets/vectors/mailed_svgrepo_com_13_x1.svg" />
					</div>
					<div class="inquiries">
						Inquiries
					</div>
				</div>
			</a>
			<a href="">
				<div class="group-33">
					<div class="logout-svgrepo-com">
						<img class="vector-3" src="~/assets/vectors/logout_svgrepo_com_11_x1.svg" />
					</div>

					<div class="log-out">
						Log Out
					</div>
				</div>
		</div></a>
		<div class="container-63">
			<div class="container-18">
				<div class="user-circle-svgrepo-com">
					<img class="vector-2" src="~/assets/vectors/vector_64_x1.svg" />
				</div>
				<div class="user">
					6
				</div>
			</div>
			<div class="container-13">
				<div class="my-bookings-1">
					My Bookings
				</div>
				<div class="line-1">
				</div>
				<div class="container-50">
					<div class="container-30">
						<div class="search-by-date">
							Search by Date
						</div>
						<div class="date-and-time-compact-expanded">
							<div class="calendar-container">

								<div class="calendar-header">
									<button class="prev-month">&lt;</button>
									<span class="month-year"></span>
									<button class="next-month">&gt;</button>
								</div>
								<div class="calendar-body">
									<div class="day-names">
										<span>Sun</span><span>Mon</span><span>Tue</span><span>Wed</span>
										<span>Thu</span><span>Fri</span><span>Sat</span>
									</div>
									<div class="days"></div>
								</div>
								<input type="text" id="selected-date" placeholder="Select Date" readonly>
							</div>
						</div>
						<div class="booking-id">
							Booking ID: <span id="bookingid"></span>
						</div>
						
						<div class="group-14">
							<button class="pay-now" onClick="downloadPdf()">
								Download Ticket
							</button>
						</div>
					</div>
					<!-- Group 10 -->
					<div class="group-10">
						@for (int row = 0; row < group10Rows; row++)
						{
							<div class="container-row">
								@for (int col = 0; col < group10ButtonsPerRow; col++)
								{
									var index = (row * group10ButtonsPerRow) + col; // Calculate the index for button class array
									var buttonId = $"seat{count}"; // Generate a unique ID for each button
									string seatNumber = seatid;
									var buttonStyle = GetButtonStyle(seatNumber);
									<div class="container">
										<button class="@buttonStyle" id="@buttonId">@($"Seat {count}")</button>
									</div>
									count++;
								}
							</div>
						}
					</div>

					<!-- Group 9 -->
					<div class="group-9">
						@for (int row = 0; row < group9Rows; row++)
						{
							<div class="container-row">
								@for (int col = 0; col < group9ButtonsPerRow; col++)
								{
									var index = (row * group9ButtonsPerRow) + col; // Calculate the index for button class array
									var buttonId = $"seat{count}"; // Generate a unique ID for each button
									<div class="container">
										<button id="@buttonId">@($"Seat {count}")</button>
									</div>
									count++;
								}
							</div>
						}
					</div>
					
		<script>
			var recieveData;

						/* Include the JavaScript code from above */
						document.addEventListener('DOMContentLoaded', function () {

							const selectedDateElement = document.getElementById('selected-date');
							const calendar = document.querySelector('.calendar-container');
							const monthYearElement = calendar.querySelector('.month-year');
							const daysContainer = calendar.querySelector('.days');
							const prevMonthButton = calendar.querySelector('.prev-month');
							const nextMonthButton = calendar.querySelector('.next-month');

							let currentDate = new Date();

							// Render the calendar for the given date
							function renderCalendar(date) {
								const year = date.getFullYear();
								const month = date.getMonth();
								const firstDay = new Date(year, month, 1).getDay();
								const lastDate = new Date(year, month + 1, 0).getDate();

								// Set the month and year title
								monthYearElement.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });

								// Clear previous days
								daysContainer.innerHTML = '';

								// Add empty spans for days of the previous month
								for (let i = 0; i < firstDay; i++) {
									daysContainer.innerHTML += `<span></span>`;
								}

								// Add days of the current month
								for (let i = 1; i <= lastDate; i++) {
									const dayElement = document.createElement('span');
									dayElement.textContent = i;
									dayElement.addEventListener('click', () => selectDate(new Date(year, month, i)));
									daysContainer.appendChild(dayElement);


								}
							}

				function selectDate(date) {

								// Format the date to YYYY-MM-DD without UTC shift
								const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;

								// Set the input field value to the formatted date
								selectedDateElement.value = formattedDate;

								// Remove the 'selected' class from all days
								document.querySelectorAll('.days span').forEach(day => day.classList.remove('selected'));

								// Calculate the correct index for the nth-child selector
								const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
								const index = date.getDate() + firstDayOfMonth;
								let id = 6;
								var day = formattedDate;

								// Highlight the selected day
								const selectedDayElement = document.querySelector(`.days span:nth-child(${index})`);
								if (selectedDayElement) {
									selectedDayElement.classList.add('selected');
								}
							$.ajax({
							url: '/Book/GetBookingsByDate',  // The URL of the backend endpoint
							type: 'GET',  // The HTTP method to use (GET in this case)
							data: { date: day ,traineeid: id },  // Data to send to the server
							success: function (data) {
								
										// Clear the current table content
										$('#results').empty();
											
										// Check if data is not empty
										if (data.length > 0) {
											// Populate the table with returned data
											console.log("Data Fetched");
											console.log(data);

											for (let n = 1; n < 81; n++) {
												$(`#seat${n}`).css({
													'background-color': '#D9D9D9',  // Change the background color
													'color': 'white',            // Change the text color
													'font-weight': 'bold',        // Make the text bold
													'cursor': 'not-allowed',
													'pointer-events': 'none'
												});
											}
											data.forEach(function (booking) {
												
												let data = booking.seatNumber;  // Adjust the property name based on your JSON structure
												var id = booking.bookId;
												
												// Update the HTML element with the fetched value
												console.log(booking);
											
												recieveData = {
													bookId: booking.bookId,
													traineeID: booking.traineeID,
													bookDateTime: booking.bookDateTime,
													seatNumber: booking.seatNumber
												};

												$('#results').text(data); // Set the text of the element with id 'dataValue'
												//$('#booking-id').text(id);
													// Dynamically select the element with id 'seatX' where X is the seat number
													$(`#seat${data}`).css({
														'background-color': '#00B5EC',  // Change the background color
														'color': 'white',            // Change the text color
														'font-weight': 'bold'        // Make the text bold
													});
											
													
													$('#bookingid').text(id);
												});
												temp = booking.seatNumber;
												} else {
													
													$('#bookingid').text('-');

													for(let n=1; n<81; n++){
														$(`#seat${n}`).css({
														'background-color': '#D9D9D9',  // Change the background color
														'color': 'white',            // Change the text color
														'font-weight': 'bold',        // Make the text bold
														'cursor': 'not-allowed',
														'pointer-events': 'none'
													});
													}
												}


							},
							error: function (xhr, status, error) {
								// This function is executed when the AJAX request fails
								console.error('Error fetching data:', error);  // Log the error for debugging
								alert('Error fetching data. Please try again.');  // Display an error message to the user
							}
						});

							}

							// Navigate to the previous month
							prevMonthButton.addEventListener('click', () => {
								currentDate.setMonth(currentDate.getMonth() - 1);
								renderCalendar(currentDate);
							});

							// Navigate to the next month
							nextMonthButton.addEventListener('click', () => {
								currentDate.setMonth(currentDate.getMonth() + 1);
								renderCalendar(currentDate);
							});

							// Initialize the calendar with the current date
							renderCalendar(currentDate);
			});

					function downloadPdf() {

								$.ajax({
									url: 'book/PDFGen', // URL of the API endpoint
									type: 'POST',
									contentType: 'application/json',
									data: JSON.stringify(recieveData),
									xhrFields: {
										responseType: 'blob' // Handle response as a binary blob
									},
									success: function (blob) {
										// Create a URL for the blob
										const url = URL.createObjectURL(blob);

										// Create a link element to download the PDF
										const link = document.createElement('a');
										link.href = url;
										link.download = 'BookingDetails.pdf'; // File name for the downloaded PDF

										// Append the link to the body and trigger a click
										document.body.appendChild(link);
										link.click();

										// Clean up by removing the link and revoking the URL
										document.body.removeChild(link);
										URL.revokeObjectURL(url);
										alert("Success");
									},
									error: function (xhr, status, error) {
										console.error('Error generating PDF:', error);
										alert(error);
									}
								});
					}

						
		</script>

</body>
</html>